// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcenv.proto

#include "rpcenv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpcenv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayNest_rpcenv_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpcenv_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_rpcenv_2eproto;
namespace rpcenv {
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
} _Action_default_instance_;
class NDArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArray> _instance;
} _NDArray_default_instance_;
class ArrayNest_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayNest_MapEntry_DoNotUse> _instance;
} _ArrayNest_MapEntry_DoNotUse_default_instance_;
class ArrayNestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayNest> _instance;
} _ArrayNest_default_instance_;
class StepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Step> _instance;
} _Step_default_instance_;
}  // namespace rpcenv
static void InitDefaultsscc_info_Action_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_Action_default_instance_;
    new (ptr) ::rpcenv::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Action_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Action_rpcenv_2eproto}, {
      &scc_info_ArrayNest_rpcenv_2eproto.base,}};

static void InitDefaultsscc_info_ArrayNest_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_ArrayNest_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::rpcenv::ArrayNest_MapEntry_DoNotUse();
  }
  {
    void* ptr = &::rpcenv::_ArrayNest_default_instance_;
    new (ptr) ::rpcenv::ArrayNest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayNest_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArrayNest_rpcenv_2eproto}, {
      &scc_info_NDArray_rpcenv_2eproto.base,}};

static void InitDefaultsscc_info_NDArray_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_NDArray_default_instance_;
    new (ptr) ::rpcenv::NDArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArray_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDArray_rpcenv_2eproto}, {}};

static void InitDefaultsscc_info_Step_rpcenv_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rpcenv::_Step_default_instance_;
    new (ptr) ::rpcenv::Step();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Step_rpcenv_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Step_rpcenv_2eproto}, {
      &scc_info_ArrayNest_rpcenv_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpcenv_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rpcenv_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpcenv_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpcenv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, action_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Action, nest_action_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, dtype_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, shape_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::NDArray, data_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest_MapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, array_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, vector_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::ArrayNest, map_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, observation_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, reward_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, done_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, episode_step_),
  PROTOBUF_FIELD_OFFSET(::rpcenv::Step, episode_return_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::rpcenv::Action)},
  { 9, 17, sizeof(::rpcenv::NDArray)},
  { 20, 27, sizeof(::rpcenv::ArrayNest_MapEntry_DoNotUse)},
  { 29, 37, sizeof(::rpcenv::ArrayNest)},
  { 40, 50, sizeof(::rpcenv::Step)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcenv::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcenv::_NDArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcenv::_ArrayNest_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcenv::_ArrayNest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpcenv::_Step_default_instance_),
};

const char descriptor_table_protodef_rpcenv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014rpcenv.proto\022\006rpcenv\"@\n\006Action\022\016\n\006acti"
  "on\030\001 \001(\005\022&\n\013nest_action\030\002 \001(\0132\021.rpcenv.A"
  "rrayNest\"9\n\007NDArray\022\r\n\005dtype\030\001 \001(\005\022\021\n\005sh"
  "ape\030\002 \003(\003B\002\020\001\022\014\n\004data\030\003 \001(\014\"\266\001\n\tArrayNes"
  "t\022\036\n\005array\030\001 \001(\0132\017.rpcenv.NDArray\022!\n\006vec"
  "tor\030\002 \003(\0132\021.rpcenv.ArrayNest\022\'\n\003map\030\003 \003("
  "\0132\032.rpcenv.ArrayNest.MapEntry\032=\n\010MapEntr"
  "y\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.rpcenv.A"
  "rrayNest:\0028\001\"z\n\004Step\022&\n\013observation\030\001 \001("
  "\0132\021.rpcenv.ArrayNest\022\016\n\006reward\030\002 \001(\002\022\014\n\004"
  "done\030\003 \001(\010\022\024\n\014episode_step\030\004 \001(\005\022\026\n\016epis"
  "ode_return\030\005 \001(\0022B\n\014RPCEnvServer\0222\n\014Stre"
  "amingEnv\022\016.rpcenv.Action\032\014.rpcenv.Step\"\000"
  "(\0010\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpcenv_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpcenv_2eproto_sccs[4] = {
  &scc_info_Action_rpcenv_2eproto.base,
  &scc_info_ArrayNest_rpcenv_2eproto.base,
  &scc_info_NDArray_rpcenv_2eproto.base,
  &scc_info_Step_rpcenv_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpcenv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpcenv_2eproto = {
  false, false, descriptor_table_protodef_rpcenv_2eproto, "rpcenv.proto", 524,
  &descriptor_table_rpcenv_2eproto_once, descriptor_table_rpcenv_2eproto_sccs, descriptor_table_rpcenv_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_rpcenv_2eproto::offsets,
  file_level_metadata_rpcenv_2eproto, 5, file_level_enum_descriptors_rpcenv_2eproto, file_level_service_descriptors_rpcenv_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpcenv_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpcenv_2eproto)), true);
namespace rpcenv {

// ===================================================================

class Action::_Internal {
 public:
  using HasBits = decltype(std::declval<Action>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rpcenv::ArrayNest& nest_action(const Action* msg);
  static void set_has_nest_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rpcenv::ArrayNest&
Action::_Internal::nest_action(const Action* msg) {
  return *msg->nest_action_;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpcenv.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nest_action()) {
    nest_action_ = new ::rpcenv::ArrayNest(*from.nest_action_);
  } else {
    nest_action_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:rpcenv.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_rpcenv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&nest_action_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&nest_action_)) + sizeof(action_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:rpcenv.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete nest_action_;
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nest_action_ != nullptr);
    nest_action_->Clear();
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rpcenv.ArrayNest nest_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nest_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action(), target);
  }

  // optional .rpcenv.ArrayNest nest_action = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nest_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rpcenv.ArrayNest nest_action = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nest_action_);
    }

    // optional int32 action = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nest_action()->::rpcenv::ArrayNest::MergeFrom(from._internal_nest_action());
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, action_)
      + sizeof(Action::action_)
      - PROTOBUF_FIELD_OFFSET(Action, nest_action_)>(
          reinterpret_cast<char*>(&nest_action_),
          reinterpret_cast<char*>(&other->nest_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArray::_Internal {
 public:
  using HasBits = decltype(std::declval<NDArray>()._has_bits_);
  static void set_has_dtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NDArray::NDArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpcenv.NDArray)
}
NDArray::NDArray(const NDArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:rpcenv.NDArray)
}

void NDArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NDArray_rpcenv_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dtype_ = 0;
}

NDArray::~NDArray() {
  // @@protoc_insertion_point(destructor:rpcenv.NDArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NDArray::ArenaDtor(void* object) {
  NDArray* _this = reinterpret_cast< NDArray* >(object);
  (void)_this;
}
void NDArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArray& NDArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArray_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void NDArray::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.NDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  dtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dtype(&has_bits);
          dtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 shape = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.NDArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dtype(), target);
  }

  // repeated int64 shape = 2 [packed = true];
  {
    int byte_size = _shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.NDArray)
  return target;
}

size_t NDArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.NDArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 dtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.NDArray)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.NDArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.NDArray)
    MergeFrom(*source);
  }
}

void NDArray::MergeFrom(const NDArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.NDArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      dtype_ = from.dtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NDArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.NDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArray::CopyFrom(const NDArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.NDArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArray::IsInitialized() const {
  return true;
}

void NDArray::InternalSwap(NDArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(dtype_, other->dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ArrayNest_MapEntry_DoNotUse::ArrayNest_MapEntry_DoNotUse() {}
ArrayNest_MapEntry_DoNotUse::ArrayNest_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ArrayNest_MapEntry_DoNotUse::MergeFrom(const ArrayNest_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ArrayNest_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ArrayNest_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ArrayNest::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayNest>()._has_bits_);
  static const ::rpcenv::NDArray& array(const ArrayNest* msg);
  static void set_has_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rpcenv::NDArray&
ArrayNest::_Internal::array(const ArrayNest* msg) {
  return *msg->array_;
}
ArrayNest::ArrayNest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vector_(arena),
  map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpcenv.ArrayNest)
}
ArrayNest::ArrayNest(const ArrayNest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  if (from._internal_has_array()) {
    array_ = new ::rpcenv::NDArray(*from.array_);
  } else {
    array_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rpcenv.ArrayNest)
}

void ArrayNest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayNest_rpcenv_2eproto.base);
  array_ = nullptr;
}

ArrayNest::~ArrayNest() {
  // @@protoc_insertion_point(destructor:rpcenv.ArrayNest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ArrayNest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete array_;
}

void ArrayNest::ArenaDtor(void* object) {
  ArrayNest* _this = reinterpret_cast< ArrayNest* >(object);
  (void)_this;
}
void ArrayNest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayNest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayNest& ArrayNest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayNest_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void ArrayNest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.ArrayNest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(array_ != nullptr);
    array_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ArrayNest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rpcenv.NDArray array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rpcenv.ArrayNest vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .rpcenv.ArrayNest> map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayNest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.ArrayNest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.NDArray array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::array(this), target, stream);
  }

  // repeated .rpcenv.ArrayNest vector = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vector(i), target, stream);
  }

  // map<string, .rpcenv.ArrayNest> map = 3;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rpcenv::ArrayNest >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "rpcenv.ArrayNest.MapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rpcenv::ArrayNest >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ArrayNest_MapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rpcenv::ArrayNest >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = ArrayNest_MapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.ArrayNest)
  return target;
}

size_t ArrayNest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.ArrayNest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rpcenv.ArrayNest vector = 2;
  total_size += 1UL * this->_internal_vector_size();
  for (const auto& msg : this->vector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .rpcenv.ArrayNest> map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::rpcenv::ArrayNest >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += ArrayNest_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .rpcenv.NDArray array = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *array_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayNest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.ArrayNest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayNest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayNest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.ArrayNest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.ArrayNest)
    MergeFrom(*source);
  }
}

void ArrayNest::MergeFrom(const ArrayNest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.ArrayNest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  map_.MergeFrom(from.map_);
  if (from._internal_has_array()) {
    _internal_mutable_array()->::rpcenv::NDArray::MergeFrom(from._internal_array());
  }
}

void ArrayNest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.ArrayNest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayNest::CopyFrom(const ArrayNest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.ArrayNest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayNest::IsInitialized() const {
  return true;
}

void ArrayNest::InternalSwap(ArrayNest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vector_.InternalSwap(&other->vector_);
  map_.Swap(&other->map_);
  swap(array_, other->array_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayNest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Step::_Internal {
 public:
  using HasBits = decltype(std::declval<Step>()._has_bits_);
  static const ::rpcenv::ArrayNest& observation(const Step* msg);
  static void set_has_observation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_done(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_episode_step(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_episode_return(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::rpcenv::ArrayNest&
Step::_Internal::observation(const Step* msg) {
  return *msg->observation_;
}
Step::Step(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rpcenv.Step)
}
Step::Step(const Step& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_observation()) {
    observation_ = new ::rpcenv::ArrayNest(*from.observation_);
  } else {
    observation_ = nullptr;
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&episode_return_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(episode_return_));
  // @@protoc_insertion_point(copy_constructor:rpcenv.Step)
}

void Step::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Step_rpcenv_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&observation_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&episode_return_) -
      reinterpret_cast<char*>(&observation_)) + sizeof(episode_return_));
}

Step::~Step() {
  // @@protoc_insertion_point(destructor:rpcenv.Step)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Step::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete observation_;
}

void Step::ArenaDtor(void* object) {
  Step* _this = reinterpret_cast< Step* >(object);
  (void)_this;
}
void Step::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Step::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Step& Step::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Step_rpcenv_2eproto.base);
  return *internal_default_instance();
}


void Step::Clear() {
// @@protoc_insertion_point(message_clear_start:rpcenv.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(observation_ != nullptr);
    observation_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&reward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&episode_return_) -
        reinterpret_cast<char*>(&reward_)) + sizeof(episode_return_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Step::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rpcenv.ArrayNest observation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_observation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool done = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_done(&has_bits);
          done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 episode_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_episode_step(&has_bits);
          episode_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float episode_return = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_episode_return(&has_bits);
          episode_return_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Step::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpcenv.Step)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rpcenv.ArrayNest observation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::observation(this), target, stream);
  }

  // optional float reward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_reward(), target);
  }

  // optional bool done = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  // optional int32 episode_step = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_episode_step(), target);
  }

  // optional float episode_return = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_episode_return(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpcenv.Step)
  return target;
}

size_t Step::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpcenv.Step)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .rpcenv.ArrayNest observation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *observation_);
    }

    // optional float reward = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool done = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 episode_step = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_episode_step());
    }

    // optional float episode_return = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Step::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rpcenv.Step)
  GOOGLE_DCHECK_NE(&from, this);
  const Step* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Step>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rpcenv.Step)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rpcenv.Step)
    MergeFrom(*source);
  }
}

void Step::MergeFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpcenv.Step)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_observation()->::rpcenv::ArrayNest::MergeFrom(from._internal_observation());
    }
    if (cached_has_bits & 0x00000002u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000004u) {
      done_ = from.done_;
    }
    if (cached_has_bits & 0x00000008u) {
      episode_step_ = from.episode_step_;
    }
    if (cached_has_bits & 0x00000010u) {
      episode_return_ = from.episode_return_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Step::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rpcenv.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Step::CopyFrom(const Step& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpcenv.Step)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Step::IsInitialized() const {
  return true;
}

void Step::InternalSwap(Step* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Step, episode_return_)
      + sizeof(Step::episode_return_)
      - PROTOBUF_FIELD_OFFSET(Step, observation_)>(
          reinterpret_cast<char*>(&observation_),
          reinterpret_cast<char*>(&other->observation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Step::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpcenv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpcenv::Action* Arena::CreateMaybeMessage< ::rpcenv::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcenv::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::NDArray* Arena::CreateMaybeMessage< ::rpcenv::NDArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcenv::NDArray >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::ArrayNest_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::rpcenv::ArrayNest_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcenv::ArrayNest_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::ArrayNest* Arena::CreateMaybeMessage< ::rpcenv::ArrayNest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcenv::ArrayNest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpcenv::Step* Arena::CreateMaybeMessage< ::rpcenv::Step >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpcenv::Step >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
