// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpcenv.proto

#include "rpcenv.pb.h"
#include "rpcenv.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpcenv {

static const char* RPCEnvServer_method_names[] = {
  "/rpcenv.RPCEnvServer/StreamingEnv",
};

std::unique_ptr< RPCEnvServer::Stub> RPCEnvServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPCEnvServer::Stub> stub(new RPCEnvServer::Stub(channel));
  return stub;
}

RPCEnvServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StreamingEnv_(RPCEnvServer_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::rpcenv::Action, ::rpcenv::Step>* RPCEnvServer::Stub::StreamingEnvRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::rpcenv::Action, ::rpcenv::Step>::Create(channel_.get(), rpcmethod_StreamingEnv_, context);
}

void RPCEnvServer::Stub::experimental_async::StreamingEnv(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::rpcenv::Action,::rpcenv::Step>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::rpcenv::Action,::rpcenv::Step>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamingEnv_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::rpcenv::Action, ::rpcenv::Step>* RPCEnvServer::Stub::AsyncStreamingEnvRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpcenv::Action, ::rpcenv::Step>::Create(channel_.get(), cq, rpcmethod_StreamingEnv_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::rpcenv::Action, ::rpcenv::Step>* RPCEnvServer::Stub::PrepareAsyncStreamingEnvRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::rpcenv::Action, ::rpcenv::Step>::Create(channel_.get(), cq, rpcmethod_StreamingEnv_, context, false, nullptr);
}

RPCEnvServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPCEnvServer_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RPCEnvServer::Service, ::rpcenv::Action, ::rpcenv::Step>(
          [](RPCEnvServer::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::rpcenv::Step,
             ::rpcenv::Action>* stream) {
               return service->StreamingEnv(ctx, stream);
             }, this)));
}

RPCEnvServer::Service::~Service() {
}

::grpc::Status RPCEnvServer::Service::StreamingEnv(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpcenv::Step, ::rpcenv::Action>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpcenv

